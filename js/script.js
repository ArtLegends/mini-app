    // –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞
    const lines = [
        'INITIALIZING BIRTHDAY PROTOCOL...',
        'LOADING FRIENDSHIP DATA...',
        'ACCESSING MEMORY BANKS...',
        '> Happy Birthday, [Friend\'s Name]!',
        '> EXECUTING celebration.exe',
        '> STATUS: Best_Friend_Found',
        '> RUNNING memory_compilation.sh',
        '> LOADING best_moments.dat',
        '##########################################',
        '> You\'ve been an amazing friend and colleague',
        '> Years of coding together: MAXIMUM_VALUE',
        '> Bugs fixed together: INFINITY',
        '> Coffee consumed: OVERFLOW_ERROR',
        '> Friendship level: LEGENDARY',
        '##########################################',
        '> SYSTEM NOTIFICATION:',
        '> Special person detected!',
        '> Initiating birthday celebration sequence...',
        '> –ñ–µ–ª–∞—é —Ç–µ–±–µ —É—Å–ø–µ—à–Ω–æ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –≤—Å–µ—Ö –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤!',
        '> Happy debugging of all your dreams!',
        '##########################################',
        'Type "help" for available commands...'
    ];
    
    // –ö–æ–º–∞–Ω–¥—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    const commands = {
        'help': 'Available commands: help, about, memories, secret, party',
        'about': 'Best friend and awesome developer detected! Status: Birthday mode activated!',
        'memories': 'Loading shared memories... [–í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è]',
        'secret': 'Access granted! Special birthday message unlocked! üéâ',
        'party': `
        üéâ üéÇ üéà üéÅ 
        HAPPY BIRTHDAY!
        üéâ üéÇ üéà üéÅ
        `
    };
    
    let currentLine = 0;
    let isTyping = false;
    let commandMode = false;
    let currentCommand = '';
    
// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∫—Ä–æ–ª–ª–∞
let userScrolling = false;
let lastScrollTop = 0;
let autoScrollEnabled = true;

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
function scrollToBottom() {
    const terminal = document.getElementById('terminal-content');
    if (autoScrollEnabled && !userScrolling) {
        terminal.scrollTop = terminal.scrollHeight;
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å–∫—Ä–æ–ª–ª–∞
document.getElementById('terminal-content').addEventListener('scroll', function(e) {
    const terminal = e.target;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞
    if (terminal.scrollTop < lastScrollTop) {
        // –°–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–∏—Ç–∞–µ—Ç
        userScrolling = true;
        autoScrollEnabled = false;
    } else if (terminal.scrollTop + terminal.clientHeight >= terminal.scrollHeight - 50) {
        // –°–∫—Ä–æ–ª–ª –ø–æ—á—Ç–∏ –≤ —Å–∞–º–æ–º –Ω–∏–∑—É - –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É
        userScrolling = false;
        autoScrollEnabled = true;
    }
    
    lastScrollTop = terminal.scrollTop;
});

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∏ —Ç–µ–∫—Å—Ç–∞
function typeText(text, callback) {
    let index = 0;
    isTyping = true;
    
    function type() {
        if (index < text.length) {
            $('#terminal-content').append(text.charAt(index));
            scrollToBottom();
            index++;
            setTimeout(type, Math.random() * 50 + 30);
        } else {
            $('#terminal-content').append('<br>');
            scrollToBottom();
            isTyping = false;
            if (callback) callback();
        }
    }
    
    type();
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è Wake Lock
let wakeLock = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ Wake Lock
async function requestWakeLock() {
    try {
        wakeLock = await navigator.wakeLock.request('screen');
        console.log('Wake Lock –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è Wake Lock –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('visibilitychange', async () => {
            if (document.visibilityState === 'visible') {
                wakeLock = await navigator.wakeLock.request('screen');
            }
        });
    } catch (err) {
        console.log(`–û—à–∏–±–∫–∞ Wake Lock: ${err.name}, ${err.message}`);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
let tg = window.Telegram.WebApp;

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∫—Ä–æ–ª–ª
document.addEventListener('touchstart', function(e) {
    const terminal = document.getElementById('terminal-content');
    if (terminal.scrollTop === 0) {
        terminal.scrollTop = 1;
    }
}, { passive: true });

document.addEventListener('touchmove', function(e) {
    const terminal = document.getElementById('terminal-content');
    if (terminal.scrollTop <= 0) {
        e.preventDefault();
    }
}, { passive: false });

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
$(document).ready(function() {
    // –†–∞—Å—à–∏—Ä—è–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
    tg.expand();
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º Wake Lock
    requestWakeLock();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    setTimeout(printNextLine, 1000);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Wake Lock
window.addEventListener('unhandledrejection', function(event) {
    console.warn('Wake Lock –æ—à–∏–±–∫–∞:', event.reason);
});

// –û—Ç–∫–ª—é—á–∞–µ–º pull-to-refresh
document.body.style.overscrollBehavior = 'none';

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
function processCommand(cmd) {
    const command = cmd.toLowerCase().trim();
    if (commands[command]) {
        typeText('> ' + commands[command], () => {
            scrollToBottom();
        });
    } else {
        typeText('> Command not found: ' + command, () => {
            scrollToBottom();
        });
    }
}
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
    function printNextLine() {
        if (currentLine < lines.length) {
            typeText(lines[currentLine], () => {
                currentLine++;
                if (currentLine < lines.length) {
                    setTimeout(printNextLine, 1000);
                } else {
                    commandMode = true;
                    $('#terminal-content').append('<br>> ');
                }
            });
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥
    $(document).on('keypress', function(e) {
        if (commandMode && !isTyping) {
            if (e.which === 13) { // Enter
                processCommand(currentCommand);
                currentCommand = '';
                setTimeout(() => {
                    $('#terminal-content').append('<br>> ');
                }, 500);
            } else {
                currentCommand += String.fromCharCode(e.which);
                $('#terminal-content').append(String.fromCharCode(e.which));
            }
        }
    });

    // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    $(document).ready(function() {
        setTimeout(printNextLine, 1000);
    });

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', function() {
    scrollToBottom();
});

/*let username = document.getElementById('username');
username.textContent = tg.initDataUnsafe.user.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

document.getElementById('showAlert').addEventListener('click', () => {
    tg.showAlert('hi!');
});

document.getElementById('sendMessage').addEventListener('click', () => {
    fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            chat_id: tg.initDataUnsafe.user.id,
            text: '–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!',
        }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.ok) {
            tg.showAlert('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
        } else {
            tg.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        tg.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
    });
});

tg.MainButton.setText('–ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞');
tg.MainButton.show();
tg.MainButton.onClick(() => {
    tg.showAlert('–í—ã –Ω–∞–∂–∞–ª–∏ –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É!');
}); */
