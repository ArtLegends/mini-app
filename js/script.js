// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentLine = 0;
let isTyping = false;
let commandMode = false;
let currentCommand = '';
let wakeLock = null;
let userScrolling = false;
let lastScrollTop = 0;
let autoScrollEnabled = true;

// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞
let inputActive = false;

// –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞
const lines = [
    'INITIALIZING BIRTHDAY PROTOCOL...',
    'LOADING FRIENDSHIP DATA...',
    'ACCESSING MEMORY BANKS...',
    '> Happy Birthday, [Friend\'s Name]!',
    '> EXECUTING celebration.exe',
    '> STATUS: Best_Friend_Found',
    '> RUNNING memory_compilation.sh',
    '> LOADING best_moments.dat',
    '##########################################',
    '> You\'ve been an amazing friend and colleague',
    '> Years of coding together: MAXIMUM_VALUE',
    '> Bugs fixed together: INFINITY',
    '> Coffee consumed: OVERFLOW_ERROR',
    '> Friendship level: LEGENDARY',
    '##########################################',
    '> SYSTEM NOTIFICATION:',
    '> Special person detected!',
    '> Initiating birthday celebration sequence...',
    '> –ñ–µ–ª–∞—é —Ç–µ–±–µ —É—Å–ø–µ—à–Ω–æ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –≤—Å–µ—Ö –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤!',
    '> Happy debugging of all your dreams!',
    '##########################################',
    'Type "help" for available commands...'
];

// –ö–æ–º–∞–Ω–¥—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
const commands = {
    'help': 'Available commands: help, about, memories, secret, party',
    'about': 'Best friend and awesome developer detected! Status: Birthday mode activated!',
    'memories': 'Loading shared memories... [–í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è]',
    'secret': 'Access granted! Special birthday message unlocked! üéâ',
    'party': `
    üéâ üéÇ üéà üéÅ 
    HAPPY BIRTHDAY!
    üéâ üéÇ üéà üéÅ
    `
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ Wake Lock
async function requestWakeLock() {
    try {
        wakeLock = await navigator.wakeLock.request('screen');
        console.log('Wake Lock –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        
        document.addEventListener('visibilitychange', async () => {
            if (document.visibilityState === 'visible') {
                wakeLock = await navigator.wakeLock.request('screen');
            }
        });
    } catch (err) {
        console.log(`–û—à–∏–±–∫–∞ Wake Lock: ${err.name}, ${err.message}`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
function scrollToBottom() {
    if (autoScrollEnabled && !userScrolling) {
        const terminal = document.getElementById('terminal-content');
        terminal.scrollTop = terminal.scrollHeight;
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∏ —Ç–µ–∫—Å—Ç–∞
function typeText(text, callback) {
    let index = 0;
    isTyping = true;
    
    function type() {
        if (index < text.length) {
            $('#terminal-content').append(text.charAt(index));
            scrollToBottom();
            index++;
            setTimeout(type, Math.random() * 50 + 30);
        } else {
            $('#terminal-content').append('<br>');
            scrollToBottom();
            isTyping = false;
            if (callback) callback();
        }
    }
    
    type();
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
function processCommand(cmd) {
    // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å–æ—Ä
    const cursor = document.getElementById('terminal-cursor');
    if (cursor) {
        cursor.remove();
    }

    const command = cmd.toLowerCase().trim();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    $('#terminal-content').append('\n');
    
    if (commands[command]) {
        typeText('> ' + commands[command], () => {
            scrollToBottom();
            setTimeout(() => {
                showCursor();
            }, 500);
        });
    } else {
        typeText('> Command not found: ' + command, () => {
            scrollToBottom();
            setTimeout(() => {
                showCursor();
            }, 500);
        });
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –∫—É—Ä—Å–æ—Ä–∞
function showCursor() {
    updateTerminalLine('');
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–≤–æ–¥–∞
function activateInput() {
    if (!inputActive && commandMode && !isTyping) {
        inputActive = true;
        
        // –°–æ–∑–¥–∞—ë–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'text';
        hiddenInput.id = 'hidden-input';
        hiddenInput.style.position = 'fixed';
        hiddenInput.style.opacity = '0';
        hiddenInput.style.height = '0';
        hiddenInput.style.width = '0';
        hiddenInput.style.left = '-1000px'; // –ü—Ä—è—á–µ–º –ø–æ–¥–∞–ª—å—à–µ –æ—Ç –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
        document.body.appendChild(hiddenInput);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        hiddenInput.value = currentCommand;
        hiddenInput.focus();
        
        hiddenInput.addEventListener('input', function(e) {
            currentCommand = this.value;
            updateTerminalLine(currentCommand);
        });
        
        hiddenInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                if (currentCommand.trim()) {
                    // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –≤–≤–æ–¥–∞
                    const terminal = document.getElementById('terminal-content');
                    const lines = terminal.innerHTML.split('\n');
                    lines.pop();
                    terminal.innerHTML = lines.join('\n');
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ —Ç–µ–∫—Å—Ç
                    terminal.appendChild(document.createElement('br'));
                    const commandLine = document.createElement('div');
                    commandLine.textContent = '> ' + currentCommand.toLowerCase();
                    terminal.appendChild(commandLine);
                    
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
                    processCommand(currentCommand);
                    currentCommand = '';
                    this.value = '';
                    this.blur();
                    document.body.removeChild(this);
                    inputActive = false;
                }
            }
        });
        
        hiddenInput.addEventListener('blur', function() {
            if (document.getElementById('hidden-input')) {
                document.body.removeChild(this);
                inputActive = false;
            }
        });
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
function updateTerminalLine(text) {
    const terminal = document.getElementById('terminal-content');
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ —Ç–µ–∫—É—â–µ–π
    const lines = terminal.innerHTML.split('\n');
    lines.pop(); // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É, —Ç–∞–∫ –∫–∞–∫ –±—É–¥–µ–º –µ—ë –æ–±–Ω–æ–≤–ª—è—Ç—å
    
    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫—É—Ä—Å–æ—Ä–æ–º
    const newLine = document.createElement('div');
    newLine.className = 'input-line';
    
    const prompt = document.createElement('span');
    prompt.textContent = '> ';
    newLine.appendChild(prompt);
    
    const textSpan = document.createElement('span');
    textSpan.textContent = text.toLowerCase();
    newLine.appendChild(textSpan);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä
    const cursor = document.createElement('span');
    cursor.id = 'terminal-cursor';
    cursor.className = 'cursor blink';
    cursor.innerHTML = '&nbsp;';
    newLine.appendChild(cursor);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    terminal.innerHTML = lines.join('\n');
    if (lines.length > 0) terminal.appendChild(document.createElement('br'));
    terminal.appendChild(newLine);
    
    scrollToBottom();
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—á–∞—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
function printNextLine() {
    if (currentLine < lines.length) {
        typeText(lines[currentLine], () => {
            currentLine++;
            if (currentLine < lines.length) {
                setTimeout(printNextLine, 1000);
            } else {
                commandMode = true;
                showCursor(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞
            }
        });
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
$(document).ready(function() {
    const tg = window.Telegram.WebApp;
    
    document.body.style.position = 'fixed';
    document.body.style.overflow = 'hidden';
    document.body.style.width = '100%';
    document.body.style.height = '100%';
    
    tg.expand();
    requestWakeLock();
    
    setTimeout(printNextLine, 1000);
    
    const terminal = document.getElementById('terminal-content');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
    terminal.addEventListener('click', function(e) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫–ª–∏–∫–Ω—É–ª–∏ –ª–∏ –º—ã –ø–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∞
        const clickedElement = e.target;
        const inputLine = clickedElement.closest('.input-line');
        
        if (!inputLine && commandMode && !isTyping) {
            // –ï—Å–ª–∏ –∫–ª–∏–∫ –Ω–µ –ø–æ —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∞ –∏ —Ä–∞–∑—Ä–µ—à—ë–Ω –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥
            activateInput();
        }
    });
    
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∫—Ä–æ–ª–ª–∞
    terminal.addEventListener('scroll', function(e) {
        if (terminal.scrollTop < lastScrollTop) {
            userScrolling = true;
            autoScrollEnabled = false;
        } else if (terminal.scrollTop + terminal.clientHeight >= terminal.scrollHeight - 50) {
            userScrolling = false;
            autoScrollEnabled = true;
        }
        lastScrollTop = terminal.scrollTop;
    });
    
    terminal.addEventListener('touchstart', function(e) {
        if (terminal.scrollTop <= 0) {
            terminal.scrollTop = 1;
            e.preventDefault();
        }
    }, { passive: false });
    
    terminal.addEventListener('touchmove', function(e) {
        if (terminal.scrollTop <= 0) {
            e.preventDefault();
        }
    }, { passive: false });
});

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
$(document).on('keypress', function(e) {
    if (commandMode && !isTyping && !inputActive) {
        if (e.which === 13) { // Enter
            if (currentCommand.trim()) {
                processCommand(currentCommand);
                currentCommand = '';
            }
        } else {
            currentCommand += String.fromCharCode(e.which).toLowerCase();
            updateTerminalLine(currentCommand);
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', scrollToBottom);
