// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentLine = 0;
let isTyping = false;
let commandMode = false;
let currentCommand = '';
let wakeLock = null;
let userScrolling = false;
let lastScrollTop = 0;
let autoScrollEnabled = true;

// –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞
const lines = [
    'INITIALIZING BIRTHDAY PROTOCOL...',
    'LOADING FRIENDSHIP DATA...',
    'ACCESSING MEMORY BANKS...',
    '> Happy Birthday, [Friend\'s Name]!',
    '> EXECUTING celebration.exe',
    '> STATUS: Best_Friend_Found',
    '> RUNNING memory_compilation.sh',
    '> LOADING best_moments.dat',
    '##########################################',
    '> You\'ve been an amazing friend and colleague',
    '> Years of coding together: MAXIMUM_VALUE',
    '> Bugs fixed together: INFINITY',
    '> Coffee consumed: OVERFLOW_ERROR',
    '> Friendship level: LEGENDARY',
    '##########################################',
    '> SYSTEM NOTIFICATION:',
    '> Special person detected!',
    '> Initiating birthday celebration sequence...',
    '> –ñ–µ–ª–∞—é —Ç–µ–±–µ —É—Å–ø–µ—à–Ω–æ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –≤—Å–µ—Ö –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤!',
    '> Happy debugging of all your dreams!',
    '##########################################',
    'Type "help" for available commands...'
];

// –ö–æ–º–∞–Ω–¥—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
const commands = {
    'help': 'Available commands: help, about, memories, secret, party',
    'about': 'Best friend and awesome developer detected! Status: Birthday mode activated!',
    'memories': 'Loading shared memories... [–í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è]',
    'secret': 'Access granted! Special birthday message unlocked! üéâ',
    'party': `
    üéâ üéÇ üéà üéÅ 
    HAPPY BIRTHDAY!
    üéâ üéÇ üéà üéÅ
    `
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ Wake Lock
async function requestWakeLock() {
    try {
        wakeLock = await navigator.wakeLock.request('screen');
        console.log('Wake Lock –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        
        document.addEventListener('visibilitychange', async () => {
            if (document.visibilityState === 'visible') {
                wakeLock = await navigator.wakeLock.request('screen');
            }
        });
    } catch (err) {
        console.log(`–û—à–∏–±–∫–∞ Wake Lock: ${err.name}, ${err.message}`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
function scrollToBottom() {
    if (autoScrollEnabled && !userScrolling) {
        const terminal = document.getElementById('terminal-content');
        terminal.scrollTop = terminal.scrollHeight;
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∏ —Ç–µ–∫—Å—Ç–∞
function typeText(text, callback) {
    let index = 0;
    isTyping = true;
    
    function type() {
        if (index < text.length) {
            $('#terminal-content').append(text.charAt(index));
            scrollToBottom();
            index++;
            setTimeout(type, Math.random() * 50 + 30);
        } else {
            $('#terminal-content').append('<br>');
            scrollToBottom();
            isTyping = false;
            if (callback) callback();
        }
    }
    
    type();
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
function processCommand(cmd) {
    const command = cmd.toLowerCase().trim();
    if (commands[command]) {
        typeText('> ' + commands[command], () => {
            scrollToBottom();
        });
    } else {
        typeText('> Command not found: ' + command, () => {
            scrollToBottom();
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
function printNextLine() {
    if (currentLine < lines.length) {
        typeText(lines[currentLine], () => {
            currentLine++;
            if (currentLine < lines.length) {
                setTimeout(printNextLine, 1000);
            } else {
                commandMode = true;
                $('#terminal-content').append('<br>> ');
            }
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
$(document).ready(function() {
    const tg = window.Telegram.WebApp;
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∫—Ä–æ–ª–ª
    document.body.style.position = 'fixed';
    document.body.style.overflow = 'hidden';
    document.body.style.width = '100%';
    document.body.style.height = '100%';
    
    // –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    tg.expand();
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º Wake Lock
    requestWakeLock();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    setTimeout(printNextLine, 1000);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∫—Ä–æ–ª–ª–∞
    const terminal = document.getElementById('terminal-content');
    
    terminal.addEventListener('scroll', function(e) {
        if (terminal.scrollTop < lastScrollTop) {
            userScrolling = true;
            autoScrollEnabled = false;
        } else if (terminal.scrollTop + terminal.clientHeight >= terminal.scrollHeight - 50) {
            userScrolling = false;
            autoScrollEnabled = true;
        }
        lastScrollTop = terminal.scrollTop;
    });
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–µ—Ä—Ö–∞
    terminal.addEventListener('touchstart', function(e) {
        if (terminal.scrollTop <= 0) {
            terminal.scrollTop = 1;
            e.preventDefault();
        }
    }, { passive: false });
    
    terminal.addEventListener('touchmove', function(e) {
        if (terminal.scrollTop <= 0) {
            e.preventDefault();
        }
    }, { passive: false });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥
$(document).on('keypress', function(e) {
    if (commandMode && !isTyping) {
        if (e.which === 13) { // Enter
            processCommand(currentCommand);
            currentCommand = '';
            setTimeout(() => {
                $('#terminal-content').append('<br>> ');
            }, 500);
        } else {
            currentCommand += String.fromCharCode(e.which);
            $('#terminal-content').append(String.fromCharCode(e.which));
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', scrollToBottom);
